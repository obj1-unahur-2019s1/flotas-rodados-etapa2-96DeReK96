import rodados.*
import dependencia.*
import pedido.*

describe "Flota de rodados" {
	const cachito = new Corsa(color = "rojo")
	
	test "Dependencia Cultura" {
		const cultura = new Dependencia(empleados = 31)
		cultura.agregarAFlota(cachito)
		
		cultura.agregarAFlota(new Kwid(tieneTanqueAdicional = true))
		cultura.agregarAFlota(new Kwid(tieneTanqueAdicional = true))
		cultura.agregarAFlota(new Kwid(tieneTanqueAdicional = false))
		
		cultura.agregarAFlota(trafic)
		
		trafic.interior(interiorPopular)
		trafic.motor(motorBataton)
		
		
		assert.equals(true, true)
	}
	
	test "Dependencia deportes" {
		const deportes = new Dependencia(empleados = 45)
		deportes.agregarAFlota(cachito)
		deportes.agregarAFlota(new Corsa(color = "azul"))
		deportes.agregarAFlota(new Corsa(color = "verde"))
		deportes.agregarAFlota(new Kwid(tieneTanqueAdicional = true))
		deportes.agregarAFlota(
			new AutoEspecial(capacidad = 5, velocidadMaxima = 160,
				peso = 1200, color = "beige")
		)
		assert.equals(6450, deportes.pesoTotalFlota())
		assert.equals(true, deportes.estaBienEquipada())
		assert.equals(7, deportes.capacidadTotalEnColor("azul"))
		assert.equals("beige", deportes.colorDelRodadoMasRapido())
		assert.equals(true, deportes.esGrande())
		assert.equals(25, deportes.capacidadFaltante())
	}
	
	test "Pedidos" {
		const pedidos = new Pedido(
			pasajeros = 4, distancia = 960, tiempoMaximo = 8,
			coloresIncompatibles = #{"azul", "negro"}
		)
		
		assert.equals(true, pedido.puedeSatisfacer(cachito))
		
		pedido.coloresIncompatibles().add("rojo")
		assert.equals(false, pedido.puedeSatisfacer(cachito))
	}
}